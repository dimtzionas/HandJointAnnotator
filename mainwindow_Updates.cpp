#include "mainwindow.h"
#include "ui_mainwindow.h"



void MainWindow::update_CURR_THINGS( int newFrameID )
{
    update_CURR_frameID( newFrameID );
    update_CURR_THINGS(  true       );
}

void MainWindow::update_CURR_THINGS( bool removeAnnotationsALL )
{
    if (removeAnnotationsALL)   annotations_REMOVE_All();

    update_CURR_Paths();
    update_CURR_Image();

    annotations_CHECK_alreadyExistsCURR();

    update_CURR_Display();

    update_list();

    ui->myLabel_Img_CurrID->setText(      currFrameID_STR );
    ui->myTextEdit_FrameID->setPlainText( currFrameID_STRshort );

    ui->myLabel_ImgFullPath->setText( PATH_CURR_DISPLAY );
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void MainWindow::update_CURR_Display(bool spin_box)
{

        if (imgCV.empty())
        {
            std::cout << "MainWindow::update_CURR_Display - EMPTY image !!!" << std::endl;
            colorize_Red();
            return;
        }

        /////////////////////////////
        imgCV = imgCV_source.clone();
        /////////////////////////////

        /////////////////////////////////////////////////////////////////////////
        if (ui->myRadioButton_Replay->isChecked() && !spin_box)  annotations_READ_CurrFrame();
        /////////////////////////////////////////////////////////////////////////

        /////////////////////////////////
        update_CURR_AnnotationsOVERLAY();
        /////////////////////////////////

        cv::Mat             tmpCvRGB;
        cv::cvtColor(imgCV, tmpCvRGB, CV_BGR2RGB);
        // create selection box
        if (ctrl_click || shift_click){
            cv::Rect rect(cv::Point(selMouseX, selMouseY), cv::Point(ui->myLabel_IMG->mouse_X, ui->myLabel_IMG->mouse_Y));
            cv::rectangle(tmpCvRGB, rect, cv::Scalar(0,0,0));
        }
        imgQT = QImage((uchar*)tmpCvRGB.data,tmpCvRGB.cols,tmpCvRGB.rows,QImage::Format_RGB888);
    //  imgQT = QImage( PATH_CURR_DISPLAY );

        ///////////////////////////////////////////////////////
        if ( ui->myLabel_IMG->size().width()  != imgCV.cols &&
             ui->myLabel_IMG->size().height() != imgCV.rows  )
             ui->myLabel_IMG->resize(imgCV.cols, imgCV.rows  ); // www,hhh
        ////////////////////////////////////////////////////////



        ui->myLabel_IMG->clear();
        ui->myLabel_IMG->setPixmap( QPixmap::fromImage(imgQT) );
        ////////////////////////////////////////////////////////

      //imgQT.save( QString( PATH_BASE_RGBD + "_______X.jpg" ) );

}

void MainWindow::update_list(){
    ui->fingerList->clear();
    QString side[] = {"Right", "Left"};
    QString fingers[] = {"Little", "Ring", "Middle", "Pointer", "Thumb"};

    ui->selFingerX->setMinimum(0);
    ui->selFingerX->setMaximum(imgCV.cols);
    ui->selFingerY->setMinimum(0);
    ui->selFingerY->setMaximum(imgCV.rows);
    ui->selFingerX->setEnabled(false);
    ui->selFingerY->setEnabled(false);
    for (int iii=0; iii<annotations.size(); iii++)
    {
            if (iii < 14){
                ui->fingerList->addItem(side[0]+" hand - "+fingers[iii/3]+" finger - joint "+QString::number(iii%3));
            } else {
                ui->fingerList->addItem(side[1]+" hand - "+fingers[(iii-14)/3]+" finger - joint "+QString::number((iii-14)%3));
            }
    }
}

void MainWindow::update_CURR_AnnotationsOVERLAY()
{

        int radius = ui->myTextEdit_AnnoWindowSize->toPlainText().toInt();

        for (int iii=0; iii<annotations.size(); iii++)
        {
                ///////////////////////////////////////////////////////////////////////////////////
                if (annotations[iii].joint_X == 0  ||  annotations[iii].joint_Y == 0)     continue;
                ///////////////////////////////////////////////////////////////////////////////////

                cv::Point center;
                          center.x = roundToInt(annotations[iii].joint_X);
                          center.y = roundToInt(annotations[iii].joint_Y);
                if(ui->fingerList->count() > iii && ui->fingerList->item(iii)->isSelected()){
                    cv::circle(imgCV,center,radius,cv::Scalar(0,0,255),radius*2);
                } else {
                    cv::circle(imgCV,center,radius,cv::Scalar(0,255,0),radius*2);
                }
        }

}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void MainWindow::update_CURR_frameID( int newFrameID )
{
    if      (newFrameID < FRAMES_ID_START)                  currFrameID = FRAMES_ID_START;
    else if (newFrameID > FRAMES_ID_START+FRAMES_TOTAL-1)   currFrameID = FRAMES_ID_START+FRAMES_TOTAL-1;
    else                                                    currFrameID = newFrameID;

    ID_NUMB_OF_DIGITS = ui->myTextEdit_DATASET_JustifyLeft_DigitsNumb->toPlainText().toInt();

    currFrameID_STR      = QString::number( currFrameID ).rightJustified(ID_NUMB_OF_DIGITS,'0',false);
    currFrameID_STRshort = currFrameID_STR;
    currFrameID_STRshort.remove( QRegExp("^[0]*") );
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void MainWindow::update_CURR_Image()
{

    ///////////////////
    bool isYML = false;
    ///////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    if      (ui->myRadioButton_Image_DepthREAL->isChecked())   {   PATH_CURR_DISPLAY = PATH_CURR_Depth;      isYML = true;    }
    else if (ui->myRadioButton_Image_DepthVIZ-> isChecked())   {   PATH_CURR_DISPLAY = PATH_CURR_DepthViz;   isYML = false;   }
    else if (ui->myRadioButton_Image_RGB->      isChecked())   {   PATH_CURR_DISPLAY = PATH_CURR_RGB;        isYML = false;   }
    else if (ui->myRadioButton_Image_RGBD->     isChecked())   {   PATH_CURR_DISPLAY = PATH_CURR_RGBD;       isYML = false;   }
    else                                                       {   PATH_CURR_DISPLAY = PATH_CURR_RGBD;       isYML = false;   }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //std::cout << PATH_CURR_DISPLAY.toStdString() << std::endl;
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    std::string filename = PATH_CURR_Depth.toStdString();
    cv::FileStorage fs(filename, cv::FileStorage::READ);
    cv::FileNode fn = fs["depth"];
    if (fn.empty())    return;

    cv::FileNodeIterator current = fn.begin(), it_end = fn.end(); // go through the node
    for ( ; current != it_end; current++)
    {
        cv::FileNode item = *current;
        item >> imgCV_DEPTH;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    if (isYML)
    {
                    double                       minn,  maxx;
                    cv::minMaxIdx( imgCV_DEPTH, &minn, &maxx );
                    cv::Mat                imgCV_DEPTH_VIZ;
                    imgCV_DEPTH.convertTo( imgCV_DEPTH_VIZ, CV_8UC1, 255/maxx );
                    cv::cvtColor         ( imgCV_DEPTH_VIZ, imgCV_source, CV_GRAY2BGR); // alliws skaei sto update_CURR_Display
    }
    else
    {
                    imgCV_source = cv::imread( PATH_CURR_DISPLAY.toStdString() );
    }

    /////////////////////////////
    /////////////////////////////
    imgCV = imgCV_source.clone();
    /////////////////////////////
    /////////////////////////////

//    testtt_CURR_Depth();

}


